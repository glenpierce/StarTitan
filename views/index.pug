doctype html
html
    head
        title Star Titan
        link(rel="stylesheet" href="/stylesheets/style.css")

    body(style="background-color:black")
        br
        div(id="selectionPanel" style="width:100px; position: fixed;")
        div(id="infoPanel" style="position: fixed; bottom: 0; color: white; font-family: monospace; display: none;")
            div(style="display: flex; padding: 8px;")
                div(style="padding-right: 4px;") Credits
                div(id="creditsValue")
            div(style="display: flex; padding: 8px;"  onclick="setResearchTarget('weapons')" class="clickable")
                div(style="padding-right: 4px;") Weapons
                div(id="weaponsValue")
            div(style="display: flex; padding: 8px;"  onclick="setResearchTarget('defense')" class="clickable")
                div(style="padding-right: 4px;") Defense
                div(id="defenseValue")
            //div(style="display: flex; padding: 8px;"  onclick="setResearchTarget('terraforming')" class="clickable")
            //    div(style="padding-right: 4px;") Terraforming
            //    div(id="terraformingValue")
            div(style="display: flex; padding: 8px;" onclick="setResearchTarget('manufacturing')" class="clickable")
                div(style="padding-right: 4px;") Manufacturing
                div(id="manufacturingValue")
            //div(style="display: flex; padding: 8px;"  onclick="setResearchTarget('range')" class="clickable")
            //    div(style="padding-right: 4px;") Range
            //    div(id="rangeValue")
            //div(style="display: flex; padding: 8px;" onclick="setResearchTarget('scanning')" class="clickable")
            //    div(style="padding-right: 4px;") Scanning
            //    div(id="scanningValue")

div(id="playerData" style="color: white; font-family: monospace;")
canvas(id="domCanvas" width="1100" height="650" style="border:1px solid #000000; padding-top:80px;")
script(src="/javascripts/socket.io.dev.js")
script.

    let foreground = document.createElement("canvas");
    let foregroundContext = foreground.getContext("2d");
    let background = document.createElement("canvas");
    background.width = 1100;
    background.height = 650;
    let backgroundContext = background.getContext("2d");

    let backgroundImage = new Image();
    backgroundImage.src = "./images/starfield.jpg";

    let domCanvas = document.getElementById("domCanvas");
    let domContext = domCanvas.getContext("2d");
    domContext.font = "10px Arial";
    domContext.textAlign = "center";
    let map;
    let clickableArea = 20;
    const socket = io.connect();
    let gameId;
    let userName = "!{user}";

    window.onload = function(onloadEvent) {
        let getGamesRequest = new XMLHttpRequest();
        getGamesRequest.onreadystatechange = function () {
            if (getGamesRequest.readyState == 3) {
            } else if (getGamesRequest.readyState == 4 && getGamesRequest.status == 200) {
                showGameSelectDialog(JSON.parse(getGamesRequest.responseText));
            }
        };
        getGamesRequest.open("GET", "/getGames", true);
        getGamesRequest.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        getGamesRequest.send();
    };

    function showGameSelectDialog(games) {
        let gameSelectDialog = document.createElement("div");
        gameSelectDialog.id ="gameSelectDialog";

        if (userName != null) {
            let nameTag = document.createElement("div");
            nameTag.textContent = userName;
            gameSelectDialog.append(nameTag);
        }

        games.forEach((game) => {
            let gameButton = document.createElement("div");
            gameButton.className = "clickable margin";
            gameButton.textContent = game;
            gameButton.addEventListener("click", function () {
                selectGame(game);
                hideModal("gameSelectDialog");
            });
            gameSelectDialog.append(gameButton);
        });

        let createGameButton = document.createElement("div");
        createGameButton.className = "clickable margin";
        createGameButton.textContent = "Create new game";
        createGameButton.addEventListener("click", function () {
            socket.emit("createNewGame", userName);
            hideModal("gameSelectDialog");
        });
        gameSelectDialog.append(createGameButton);

        let loginButton = document.createElement("div");
        loginButton.className = "clickable margin";
        loginButton.textContent = "login";
        loginButton.addEventListener("click", function () {
            window.location = "/login";
        });
        gameSelectDialog.append(loginButton);

        document.getElementById("playerData").append(gameSelectDialog);
    }

    function hideModal(id) {
        document.getElementById(id).style.display = "none";
    }

    function selectGame(selectedGameId) {
        gameId = selectedGameId;
        socket.emit('playerJoin', {selectedGameId: selectedGameId, user: userName});
    }

    socket.on('playerAdded', function(data) {
        gameId = data;
    });

    let selectionPanel = document.getElementById("selectionPanel");
    let infoPanel = document.getElementById("infoPanel");

    let avgWhiteStar =  new Image();
    avgWhiteStar.src = "images/averstarwhite.png";
    avgWhiteStar.width = 36;
    avgWhiteStar.height = 24;

    domCanvas.addEventListener("click", onClick);
    function onClick(event) {
        if (map == null) {
            return;
        }
        if (map.MAP == null) {
            return;
        }
        let canvasX = event.x - domCanvas.offsetLeft + document.body.scrollLeft;
        let canvasY = event.y - domCanvas.offsetTop + document.body.scrollTop - 80; // 80 is the top-padding of the canvas
        socket.emit("click(" + canvasX + ", " + canvasY + ")");
        while (selectionPanel.hasChildNodes()) {
            selectionPanel.removeChild(selectionPanel.lastChild);
        }
        let selectionCount = 0;
        for(let i = 0; i < map.MAP.length; i++) {
            if(map.MAP[i].x < canvasX + clickableArea && map.MAP[i].x > canvasX - clickableArea && map.MAP[i].y < canvasY + clickableArea && map.MAP[i].y > canvasY - clickableArea) {
                if(map.MAP[i].type == "ship") {
                    selectionCount++;
                    drawShip(map.MAP[i].x, map.MAP[i].y, map.MAP[i].ships, map.MAP[i].destination, map.MAP[i].owner, true, domContext);
                } else if(map.MAP[i].type == "star"  && map.MAP[i].owner == getThisPlayer().ordinal) {
                    selectionCount++;
                    let selectedStarName = document.createElement('input');
                    selectedStarName.disabled = true;
                    selectedStarName.type = "text";
                    selectedStarName.value = map.MAP[i].id;
                    let selectedStarEconomy = document.createElement('button');
                    selectedStarEconomy.type = "button";
                    selectedStarEconomy.innerHTML = map.MAP[i].economy;
                    let selectedStarIndustry = document.createElement('button');
                    selectedStarIndustry.type = "button";
                    selectedStarIndustry.innerHTML = map.MAP[i].industry;
                    let selectedStarScience = document.createElement('button');
                    selectedStarScience.type = "button";
                    selectedStarScience.innerHTML = map.MAP[i].science;
                    let selectedStarShips = document.createElement('button');
                    selectedStarShips.id = "selectedStarShips";
                    selectedStarShips.type = "button";
                    selectedStarShips.innerHTML = map.MAP[i].ships;

                    let selectedStar = document.createElement('div');
                    selectedStar.style.display = "flex";
                    selectionPanel.appendChild(selectedStarName);
                    selectedStar.appendChild(selectedStarEconomy);
                    selectedStar.appendChild(selectedStarIndustry);
                    selectedStar.appendChild(selectedStarScience);
                    selectedStar.appendChild(selectedStarShips);
                    selectionPanel.appendChild(selectedStar);
                    selectedStarName.setAttribute("style","width:94px");

                    selectedStarIndustry.addEventListener("click", function() {incrementIndustry(selectedStarName.value, selectedStarIndustry)});
                    selectedStarScience.addEventListener("click", function() {incrementScience(selectedStarName.value, selectedStarScience)});
                    selectedStarEconomy.addEventListener("click", function() {incrementEconomy(selectedStarName.value, selectedStarEconomy)});

                    selectedStarShips.addEventListener("click", function() {openSelectShipCount(selectedStarName.value)});
                    selectedStarShips.addEventListener("click", function() {openTransmitShipOrders(selectedStarName.value)});
                }
            }
        }
        if(selectionCount < 1) {
            while (selectionPanel.hasChildNodes()) {
                selectionPanel.removeChild(selectionPanel.lastChild);
            }
        }
    }

    socket.on('state', function(data) {
        if(data.toString().substring(2,5) == "MAP") {
            map = JSON.parse(data);
            drawMap();
        }
    });

    let shipsToSend = 0;

    function openSelectShipCount(originStarName) {
        if(selectionPanel.childElementCount > 2) {
            return;
        }
        let x;
        let y;
        let owner;
        let maxShips;
        for(let i = 0; i < map.MAP.length; i++) {
            if(map.MAP[i].type == "star") {
                if(map.MAP[i].id == originStarName) {
                    x = map.MAP[i].x;
                    y = map.MAP[i].y;
                    owner = map.MAP[i].owner;
                    maxShips = map.MAP[i].ships;
                    break;
                }
            }
        }
        let slider = document.createElement("input");
        slider.type = "range";
        slider.min = 0;
        slider.max = maxShips;
        slider.value = maxShips;
        shipsToSend = slider.value;
        document.getElementById("selectedStarShips").innerHTML = shipsToSend;
        slider.addEventListener('input', (event) => {
            shipsToSend = event.target.value;
            document.getElementById("selectedStarShips").innerHTML = shipsToSend;
        });
        selectionPanel.append(slider);
    }

    function openTransmitShipOrders(originStarName) {
        if (map == null) {
            return;
        }
        if (map.MAP == null) {
            return;
        }
        let x = 0;
        let y = 0;
        let owner;
        let maxShips;
        for(let i = 0; i < map.MAP.length; i++) {
            if(map.MAP[i].type == "star") {
                if(map.MAP[i].id == originStarName) {
                    x = map.MAP[i].x;
                    y = map.MAP[i].y;
                    owner = map.MAP[i].owner;
                    maxShips = map.MAP[i].ships;
                    break;
                }
            }
        }
        domCanvas.onmousemove = onMouseMove;
        function onMouseMove(mouseEvent) {
            // clearMap(subcanvas, subCtx);
            for(let i = 0; i < map.MAP.length; i++) {
                if(map.MAP[i].type == "star") {
                    domContext.strokeStyle = '#000000';
                    if(Math.abs(map.MAP[i].x - mouseEvent.offsetX) < 20 && Math.abs(map.MAP[i].y - mouseEvent.offsetY + 80) < 20) {
                        domContext.strokeStyle = getPlayerColor(parseInt(owner, 10));
                    }
                    domContext.setLineDash([2, 2]);
                    domContext.lineWidth = 1;
                    domContext.beginPath();
                    domContext.moveTo(x, y);
                    domContext.lineTo(map.MAP[i].x, map.MAP[i].y);
                    domContext.stroke();
                }
            }
        }

        domCanvas.onclick = onClick2;
        function onClick2(event) {
            let destinationStarName = "";
            let numberOfShips = shipsToSend;
            shipsToSend = 0;

            let canvasX = event.x - domCanvas.offsetLeft + document.body.scrollLeft;
            let canvasY = event.y - domCanvas.offsetTop + document.body.scrollTop - 80;
            for(let i = 0; i < map.MAP.length; i++) {
                if (map.MAP[i].x < canvasX + clickableArea && map.MAP[i].x > canvasX - clickableArea && map.MAP[i].y < canvasY + clickableArea && map.MAP[i].y > canvasY - clickableArea) {
                    if (map.MAP[i].type == "star") {
                        destinationStarName = map.MAP[i].id;
                        break;
                    }
                }
            }
            if(destinationStarName != "" && numberOfShips > 0) {
                transmitShipOrders(originStarName, x, y, destinationStarName, numberOfShips, owner);
            }
            domCanvas.onclick = null;
            domCanvas.onmousemove = null;
        }
    }

    function transmitShipOrders(originStarName, x, y, destinationStarName, numberOfShips, owner) {
        let order = {order: []};
        order.order.push({
            origin: originStarName,
            x: x,
            y: y,
            type: "shipOrder",
            destination: destinationStarName,
            numberOfShips: numberOfShips,
            owner: owner
        });
        socket.emit('playerAction', gameId, JSON.stringify(order));
    }

    function incrementIndustry(starName, selectedStarIndustry) {
        if (map == null) {
            return;
        }
        if (map.MAP == null) {
            return;
        }
        for(let i = 0; i < map.MAP.length; i++) {
            if(map.MAP[i].id == starName) {
                let owner = parseInt(map.MAP[i].owner);
                if(map.PlayerData[owner].credits >= map.MAP[i].industry) {
                    map.PlayerData[owner].credits -= map.MAP[i].industry;
                    map.MAP[i].industry += 1;
                    selectedStarIndustry.innerHTML = map.MAP[i].industry;
                    let order = {order: []};
                    order.order.push({
                    id: starName,
                        type: "increment",
                        science: "0",
                        industry: "1",
                        economy: "0",
                    });
                    socket.emit('playerAction', gameId, JSON.stringify(order));
                }
                break;
            }
        }
        drawMap();
    }

    function incrementScience(starName, selectedStarScience) {
        if (map == null) {
            return;
        }
        if (map.MAP == null) {
            return;
        }
        for(let i = 0; i < map.MAP.length; i++) {
            if(map.MAP[i].id == starName) {
                let owner = parseInt(map.MAP[i].owner);
                if(map.PlayerData[owner].credits >= map.MAP[i].science) {
                    map.PlayerData[owner].credits -= map.MAP[i].science;
                    map.MAP[i].science += 1;
                    selectedStarScience.innerHTML = map.MAP[i].science;
                    let order = {order: []};
                    order.order.push({
                        id: starName,
                        type: "increment",
                        science: "1",
                        industry: "0",
                        economy: "0"
                    });
                    socket.emit('playerAction', gameId, JSON.stringify(order));
                }
                break;
            }
        }
        drawMap();
    }

    function incrementEconomy(starName, selectedStarEconomy) {
        if (map == null) {
            return;
        }
        if (map.MAP == null) {
            return;
        }
        for(let i = 0; i < map.MAP.length; i++) {
            if(map.MAP[i].id == starName) {
                let owner = parseInt(map.MAP[i].owner);
                if(map.PlayerData[owner].credits >= map.MAP[i].economy) {
                    map.PlayerData[owner].credits -= map.MAP[i].economy;
                    map.MAP[i].economy += 1;
                    selectedStarEconomy.innerHTML = map.MAP[i].economy;
                    let order = {order: []};
                    order.order.push({
                        id: starName,
                        type: "increment",
                        science: "0",
                        industry: "0",
                        economy: "1"
                    });
                    socket.emit('playerAction', gameId, JSON.stringify(order));
                }
                break;
            }
        }
        drawMap();
    }

    function setResearchTarget(tech) {
        let order = {order: []};
        order.order.push({
            player: getThisPlayer().id,
            type: "researchTarget",
            tech: tech
        });
        socket.emit('playerAction', gameId, JSON.stringify(order));
    }

    function drawMap() {
        if (map == null) {
            return;
        }
        if (map.MAP == null) {
            return;
        }
        clearMap(domCanvas, domContext);
        backgroundContext.drawImage(backgroundImage, 0, 0, backgroundImage.width, backgroundImage.height, 0, 0, 1100, 650);
        domContext.drawImage(background, 0, 0, 1100, 650);

        document.getElementById("creditsValue").innerText = getThisPlayer().credits;
        document.getElementById("weaponsValue").innerText = getThisPlayer().weapons;
        document.getElementById("defenseValue").innerText = getThisPlayer().defense;
        // document.getElementById("terraformingValue").innerText = getThisPlayer().terraforming;
        document.getElementById("manufacturingValue").innerText = getThisPlayer().manufacturing;
        // document.getElementById("rangeValue").innerText = getThisPlayer().range;
        // document.getElementById("scanningValue").innerText = getThisPlayer().scanning;

        infoPanel.style.display = "block";
        infoPanel.style.color = getPlayerColor(getThisPlayer().ordinal);
        // while (infoPanel.hasChildNodes()) {
        //     infoPanel.removeChild(infoPanel.lastChild);
        // }
        //     let playerInfo = document.createElement('div');
        //     playerInfo.innerHTML="player: " + i + ":" + map.PlayerData[i].credits + " weapons: " + map.PlayerData[i].weapons + " defense: " + map.PlayerData[i].defense + " terraforming: " + map.PlayerData[i].terraforming + " manufacturing: " + map.PlayerData[i].manufacturing + " range: " + map.PlayerData[i].range;
        //     infoPanel.appendChild(playerInfo);
        // }
        for(let i = 0; i < map.MAP.length; i++) {
            if(map.MAP[i].type == "star") {
                drawStar(map.MAP[i].x, map.MAP[i].y, map.MAP[i].id, map.MAP[i].science, map.MAP[i].industry, map.MAP[i].economy, map.MAP[i].ships, map.MAP[i].owner, domContext);
            }
            if(map.MAP[i].type == "ship") {
                drawShip(map.MAP[i].x, map.MAP[i].y, map.MAP[i].ships, map.MAP[i].destination, map.MAP[i].owner, false, domContext);
            }
        }
    }

    function drawStar(x, y, name, science, industry, economy, ships, owner, ctx) {
        ctx.fillStyle="#FFFFFF";
        x = parseInt(x, 10);
        y = parseInt(y, 10);
        owner = parseInt(owner, 10);
        ctx.fillText(name, x, y + 15);
        ships = parseInt(ships,10);
        if(ships > 0) {
            ctx.fillText(ships, x, y + 23);
        }
        if(owner == 4) {
            ctx.drawImage(avgWhiteStar, x - 18, y - 12);
        } else {
            ctx.fillText(economy, x - 7, y - 12);
            ctx.fillText(industry, x, y - 12);
            ctx.fillText(science, x + 7, y - 12);
            ctx.beginPath();
            ctx.arc(x, y, 8, 0, 2 * Math.PI);
            let gradient = ctx.createRadialGradient(x, y, 2, x, y, 8);
            gradient.addColorStop(0, getPlayerColor(parseInt(owner, 10)));
            gradient.addColorStop(1, "black");
            ctx.fillStyle = gradient;
            ctx.fill();
        }
    }

    function drawShip(x, y, ships, destination, owner, isSelected, ctx) {
        ctx.fillStyle="#FFFFFF";
        x = parseInt(x, 10);
        y = parseInt(y, 10);
        ctx.fillText(ships, x, y + 20);
        ctx.beginPath();
        ctx.moveTo(x,y);
        ctx.lineTo(x-4,y-3);
        ctx.lineTo(x-4,y+3);
        ctx.fill();
        for(let i = 0; i < map.MAP.length; i++) {
            if(map.MAP[i].type=="star") {
                if(map.MAP[i].id == destination) {
                    ctx.strokeStyle=getPlayerColor(parseInt(owner, 10));
                    if(isSelected) {
                        ctx.setLineDash([]);
                        ctx.lineWidth=2;
                    } else {
                        ctx.setLineDash([2, 2]);
                        ctx.lineWidth=1;
                    }
                    ctx.beginPath();
                    ctx.moveTo(x,y);
                    ctx.lineTo(map.MAP[i].x, map.MAP[i].y);
                    ctx.stroke();
                }
            }
        }
    }

    function clearMap(canvas, ctx) {
        ctx.clearRect(0,0,canvas.width,canvas.height);
    }

    function getPlayerColor(player) {
        switch(player) {
            case 0:
                return "#FE8EE9"; //pink
            case 1:
                return "#8EB9FE"; //blue
            case 2:
                return "#B4FE8E"; //green
            case 3:
                return "#FEE28E"; //yellow
            case 4:
                return "#FFFFFF";
        }
    }

    function getThisPlayer() {
        for (let i = 0; i < map.PlayerData.length; i++) {
            if (map.PlayerData[i].id.toString() == socket.id) {
                map.PlayerData[i].ordinal = i;
                return map.PlayerData[i];
            }
        }
        return {id:socket.id};
    }